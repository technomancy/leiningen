(ns leiningen.pom
  "Write a pom.xml file to disk for Maven interop."
  (:use [leiningen.util.maven :only [make-exclusion make-dependency
                                     make-repository make-license
                                     make-mailing-list make-model]]
        [clojure.java.io :only [copy file]]
        [clojure.contrib.properties :only [as-properties]])
  (:import [java.io StringWriter ByteArrayOutputStream]
           [org.apache.maven.project MavenProject]))

(def #^{:doc "A notice to place at the bottom of generated files."} disclaimer
     "\n<!-- This file was autogenerated by the Leiningen build tool.
  Please do not edit it directly; instead edit project.clj and regenerate it.
  It should not be considered canonical data. For more information see
  http://github.com/technomancy/leiningen -->\n")

(defn make-pom
  ([project] (make-pom project false))
  ([project disclaimer?]
     (with-open [w (StringWriter.)]
       (.writeModel (MavenProject. (make-model project)) w)
       (when disclaimer?
         (.write w disclaimer))
       (.getBytes (str w)))))

(defn make-pom-properties [project]
  (with-open [baos (ByteArrayOutputStream.)]
    (.store (as-properties {:version (:version project)
                            :groupId (:group project)
                            :artifactId (:name project)})
            baos "Leiningen")
    (.getBytes (str baos))))

(defn pom
  "Write a pom.xml file to disk for Maven interop."
  ([project pom-location silently?]
     (let [pom-file (file (:root project) pom-location)]
       (copy (make-pom project true) pom-file)
       (when-not silently? (println "Wrote" (.getName pom-file)))
       (.getAbsolutePath pom-file)))
  ([project pom-location] (pom project pom-location false))
  ([project] (pom project "pom.xml")))
